library(ggplot2)
library(dplyr)
#install.packages('statsr')
library(statsr)
#package_version('statsr')
library(BAS)
library(caret)
library(grid)
library(gridExtra)
detach("package:gridExtra",character.only = TRUE, unload=TRUE)
library(lattice)
set.seed(123)
load("movies.Rdata")
str(movies)
summary(movies)
movies <- mutate(movies, feature_film = as.factor(ifelse(movies$'title_type' == 'Feature Film', 'yes', 'no')))
movies <- mutate(movies, drama = as.factor(ifelse(movies$'genre' == 'Drama', 'yes', 'no')))
movies <- mutate(movies, mpaa_rating_R = as.factor(ifelse(movies$mpaa_rating == 'R', 'yes', 'no')))
movies <- mutate(movies, oscar_season = as.factor(ifelse(movies$thtr_rel_month %in% c(10:12), 'yes', 'no')))
movies <- mutate(movies, summer_season = as.factor(ifelse(movies$thtr_rel_month %in% c(5:8), 'yes', 'no')))
movies <- movies[complete.cases(movies),]
new_features <- select(movies, c('audience_score', 'feature_film', 'drama', 'mpaa_rating_R', 'oscar_season', 'summer_season'))
summary(new_features)
options(repr.plot.width = 5, repr.plot.height = 2)
audience_score_hist <- ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
audience_score_density <- ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
grid.arrange(audience_score_hist, audience_score_density, nrow=1,  ncol=2)
options(repr.plot.width = 5, repr.plot.height = 2)
audience_score_hist <- ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
audience_score_density <- ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
grid.arrange(audience_score_hist, audience_score_density, nrow=1,  ncol=2)
?grid.agrange
options(repr.plot.width = 5, repr.plot.height = 2)
audience_score_hist <- ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
audience_score_density <- ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
require(ggplot2)
require(gridExtra)
grid.arrange(audience_score_hist, audience_score_density, nrow=1,  ncol=2)
grid.arrange
library(ggplot2)
library(dplyr)
#install.packages('statsr')
library(statsr)
#package_version('statsr')
library(BAS)
library(caret)
library(grid)
library(gridExtra)
detach("package:gridExtra",character.only = TRUE, unload=TRUE)
library(lattice)
set.seed(123)
load("movies.Rdata")
str(movies)
summary(movies)
movies <- mutate(movies, feature_film = as.factor(ifelse(movies$'title_type' == 'Feature Film', 'yes', 'no')))
movies <- mutate(movies, drama = as.factor(ifelse(movies$'genre' == 'Drama', 'yes', 'no')))
movies <- mutate(movies, mpaa_rating_R = as.factor(ifelse(movies$mpaa_rating == 'R', 'yes', 'no')))
movies <- mutate(movies, oscar_season = as.factor(ifelse(movies$thtr_rel_month %in% c(10:12), 'yes', 'no')))
movies <- mutate(movies, summer_season = as.factor(ifelse(movies$thtr_rel_month %in% c(5:8), 'yes', 'no')))
movies <- movies[complete.cases(movies),]
new_features <- select(movies, c('audience_score', 'feature_film', 'drama', 'mpaa_rating_R', 'oscar_season', 'summer_season'))
summary(new_features)
options(repr.plot.width = 5, repr.plot.height = 2)
audience_score_hist <- ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
ggplot(data=movies, aes(x = audience_score)) +
geom_histogram(bins=floor(sqrt(length(movies$audience_score)))) +
ggtitle("Audience Score Histogram")
audience_score_density <- ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
ggplot(movies, aes(x=audience_score)) +
geom_density(alpha=.5) +
ggtitle("Audience Score Density")
require(ggplot2)
require(gridExtra)
grid.arrange(audience_score_hist, audience_score_density, nrow=1,  ncol=2)
grid.arrange
film_hist <- ggplot(movies, aes(x=audience_score, fill=feature_film)) + geom_histogram(alpha=.5, position="dodge")
film_density <- ggplot(movies, aes(x=audience_score, fill=feature_film)) + geom_density(alpha=.5)
drama_hist <- ggplot(movies, aes(x=audience_score, fill=drama)) + geom_histogram(alpha=.5, position="dodge")
drama_density <- ggplot(movies, aes(x=audience_score, fill=drama)) + geom_density(alpha=.5)
RR_hist <- ggplot(movies, aes(x=audience_score, fill=mpaa_rating_R)) + geom_histogram(alpha=.5, position="dodge")
RR_density <- ggplot(movies, aes(x=audience_score, fill=mpaa_rating_R)) + geom_density(alpha=.5)
oscar_hist <- ggplot(movies, aes(x=audience_score, fill=oscar_season)) + geom_histogram(alpha=.5, position="dodge")
oscar_density <- ggplot(movies, aes(x=audience_score, fill=oscar_season)) + geom_density(alpha=.5)
summer_hist <- ggplot(movies, aes(x=audience_score, fill=summer_season)) + geom_histogram(alpha=.5, position="dodge")
summer_density <- ggplot(movies, aes(x=audience_score, fill=summer_season)) + geom_density(alpha=.5)
grid.arrange(film_hist, film_density, drama_hist, drama_density, RR_hist, RR_density, oscar_hist, oscar_density, summer_hist, summer_density, ncol=2)
movies %>% group_by(feature_film) %>% summarise(min=min(audience_score), q25=quantile(audience_score,0.25), median=median(audience_score), mean=mean(audience_score), q75=quantile(audience_score,0.75), max=max(audience_score))
movies %>% group_by(drama) %>% summarise(min=min(audience_score), q25=quantile(audience_score,0.25), median=median(audience_score), mean=mean(audience_score), q75=quantile(audience_score,0.75), max=max(audience_score))
movies %>% group_by(mpaa_rating_R) %>% summarise(min=min(audience_score), q25=quantile(audience_score,0.25), median=median(audience_score), mean=mean(audience_score), q75=quantile(audience_score,0.75), max=max(audience_score))
movies %>% group_by(oscar_season) %>% summarise(min=min(audience_score), q25=quantile(audience_score,0.25), median=median(audience_score), mean=mean(audience_score), q75=quantile(audience_score,0.75), max=max(audience_score))
movies %>% group_by(summer_season) %>% summarise(min=min(audience_score), q25=quantile(audience_score,0.25), median=median(audience_score), mean=mean(audience_score), q75=quantile(audience_score,0.75), max=max(audience_score))
ggplot(movies, aes(x=feature_film, y=audience_score, fill=feature_film)) + geom_boxplot()
ggplot(movies, aes(x=drama, y=audience_score, fill=drama)) + geom_boxplot()
ggplot(movies, aes(x=mpaa_rating_R, y=audience_score, fill=mpaa_rating_R)) + geom_boxplot()
ggplot(movies, aes(x=oscar_season, y=audience_score, fill=oscar_season)) + geom_boxplot()
ggplot(movies, aes(x=summer_season, y=audience_score, fill=summer_season)) + geom_boxplot()
ggplot(movies, aes(x=drama, y=audience_score, fill=drama)) + geom_boxplot()
bayes_inference(y=audience_score, x=feature_film, data=movies, statistic="mean", type="ht", null=0, alternative="twosided")
bayes_inference(y=audience_score, x=drama, data=movies, statistic="mean", type="ht", null=0, alternative="twosided")
bayes_inference(y=audience_score, x=mpaa_rating_R, data=movies, statistic="mean", type="ht", null=0, alternative="twosided")
bayes_inference(y=audience_score, x=oscar_season, data=movies, statistic="mean", type="ht", null=0, alternative="twosided")
bayes_inference(y=audience_score, x=summer_season, data=movies, statistic="mean", type="ht", null=0, alternative="twosided")
mpar = c('feature_film', 'drama', 'runtime', 'mpaa_rating_R', 'thtr_rel_year', 'oscar_season', 'summer_season', 'imdb_rating', 'imdb_num_votes', 'critics_score', 'best_pic_nom', 'best_pic_win', 'best_actor_win', 'best_actress_win', 'best_dir_win', 'top200_box', 'audience_score')
select_movies<- select(movies, mpar)
set.seed(123)
train_ind <- createDataPartition(select_movies$audience_score, p = 0.8,list = FALSE)
train <- select_movies[train_ind, ]
test <- select_movies[-train_ind, ]
set.seed(123)
# We use the Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_regressor <- bas.lm(audience_score ~ .,
data = train,
prior = "BIC",
modelprior = uniform(),
method = "MCMC",
MCMC.iterations = 10^7)
bma_regressor
summary(bma_regressor)
image(bma_regressor, rotate=FALSE, top.models = 20)
diagnostics(bma_regressor, type="model",pch=20)
coefficients(bma_regressor, estimator = 'BMA')
confint(coefficients(bma_regressor))
plot(coefficients(bma_regressor), subset=c(4, 9, 11), ask=FALSE)
pred <- predict(bma_regressor, newdata=test, estimator="BPM", se.fit=TRUE)
ci_pred <- confint(pred, parm = "pred")
df = data.frame(movie_title=movies[-train_ind, ]$title, audience_score=test$audience_score, prediction=pred$Ybma, lower=ci_pred[,1], upper=ci_pred[,2])
head(df, 20)
ci_pred
df2 <- as.data.frame(cbind(pred$Ybma,test$audience_score))
colnames(df2) <- c('fit','actual')
ggplot(data = df2, aes(x = df2$fit, y= df2$actual)) +
geom_point(alpha = 1) +
geom_abline( slope = 1,intercept =0,)+
labs(x = "Fitted values", y = "Actual values")
print(quantile(df$audience_score - pred$Ybma, probs = c(0,0.25, 0.5, 0.75, 1)))
hist(df$audience_score - pred$Ybma, breaks=2*floor(sqrt(length(pred$Ybma))), main="absolute error", xlab="audience_score - prediction", ylab = "count")
hist(100 * (df$audience_score - pred$Ybma)/(df$audience_score), breaks=2*floor(sqrt(length(pred$Ybma))), main="relative error", xlab="relative error [%]")
# in_ci: A list contains TURE and FALSE
in_ci = (as.numeric(df$audience_score > df$lower) & as.numeric(df$audience_score < df$upper))
# n: number of audience_score in credible interval
n = length(in_ci[in_ci])
n
# Percentage of predictions are within the 95% CI
within_interval = 100 *  n/ length(in_ci)
result <- data.frame(Total =nrow(movies[-train_ind, ]), Tests_in_interval=n, tests_within_CI95=within_interval)
result
mpar = c('feature_film', 'drama', 'runtime', 'mpaa_rating_R', 'thtr_rel_year', 'oscar_season', 'summer_season', 'imdb_rating', 'imdb_num_votes', 'critics_score', 'best_pic_nom', 'best_pic_win', 'best_actor_win', 'best_actress_win', 'best_dir_win', 'top200_box', 'audience_score')
select_movies<- select(movies, mpar)
set.seed(123)
train_ind <- createDataPartition(select_movies$audience_score, p = 0.8,list = FALSE)
train <- select_movies[train_ind, ]
test <- select_movies[-train_ind, ]
set.seed(123)
# We use the Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_regressor <- bas.lm(audience_score ~ .,
data = train,
prior = "BIC",
modelprior = uniform(),
method = "MCMC",
MCMC.iterations = 10^7)
